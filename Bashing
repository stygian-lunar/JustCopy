#!/bin/bash

# === CONFIGURATION ===
WATCH_DIRS=(
    "/path/to/folder1"
    "/path/to/folder2"
)
SEEN_LOG="/tmp/filewatcher_seen.log"

# === SETUP ===
touch "$SEEN_LOG"
echo "Watching for new files..."
echo "Tracking seen files in: $SEEN_LOG"

# === MAIN LOOP ===
while true; do
    for DIR in "${WATCH_DIRS[@]}"; do
        [ -d "$DIR" ] || continue
        for FILE in "$DIR"/*; do
            [[ -f "$FILE" ]] || continue

            if ! grep -Fxq "$FILE" "$SEEN_LOG"; then
                echo "ðŸ“‚ New file detected: $FILE"
                echo "$FILE" >> "$SEEN_LOG"
            fi
        done
    done
    sleep 2
done






#!/bin/bash

# === CONFIGURATION ===
WATCH_DIRS=(
    "/path/to/inbox1"
    "/path/to/inbox2"
)
OUTBOX_DIR="/path/to/outbox"
LOG_FILE="/tmp/filewatcher.log"

# === SETUP ===
mkdir -p "$OUTBOX_DIR"
touch "$LOG_FILE"

# === MAIN LOOP ===
while true; do
    for DIR in "${WATCH_DIRS[@]}"; do
        [ -d "$DIR" ] || continue
        for FILE in "$DIR"/*; do
            [[ -f "$FILE" ]] || continue

            FILE_NAME=$(basename "$FILE")
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            NEW_NAME="${TIMESTAMP}_${FILE_NAME}"
            DEST_PATH="$OUTBOX_DIR/$NEW_NAME"

            mv "$FILE" "$DEST_PATH"
            echo "$(date '+%Y-%m-%d %H:%M:%S') MOVED: $FILE -> $DEST_PATH" >> "$LOG_FILE"
        done
    done
    sleep 2
done




#!/bin/bash

# === CONFIGURATION ===
WATCH_DIRS=(
    "/path/to/inbox1"
    "/path/to/inbox2"
)
OUTBOX_DIR="/path/to/outbox"
LOG_FILE="/tmp/filewatcher_inotify.log"

# Create outbox and log file if missing
mkdir -p "$OUTBOX_DIR"
touch "$LOG_FILE"

# Prepare directories for inotifywait (space-separated)
WATCH_PATHS="${WATCH_DIRS[*]}"

# Start watching for new files (CREATE events)
inotifywait -m -e create --format '%w%f' $WATCH_PATHS | while read NEWFILE
do
    # Ensure it's a regular file
    if [[ -f "$NEWFILE" ]]; then
        FILE_NAME=$(basename "$NEWFILE")
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        NEW_NAME="${TIMESTAMP}_${FILE_NAME}"
        DEST_PATH="$OUTBOX_DIR/$NEW_NAME"

        mv "$NEWFILE" "$DEST_PATH"
        echo "$(date '+%Y-%m-%d %H:%M:%S') MOVED: $NEWFILE -> $DEST_PATH" >> "$LOG_FILE"
    fi
done




#!/bin/bash

# === CONFIGURATION ===
WATCH_DIRS=(
    "/path/to/inbox1"
    "/path/to/inbox2"
)
OUTBOX_DIR="/path/to/outbox"
LOG_FILE="/tmp/filewatcher.log"

# === SETUP ===
mkdir -p "$OUTBOX_DIR"
touch "$LOG_FILE"

# Enable case-insensitive matching (optional)
shopt -s nocasematch

# === MAIN LOOP ===
while true; do
    for DIR in "${WATCH_DIRS[@]}"; do
        [ -d "$DIR" ] || continue

        for FILE in "$DIR"/*; do
            [[ -f "$FILE" ]] || continue

            # Move only .csv files
            if [[ "$FILE" == *.csv ]]; then
                FILE_NAME=$(basename "$FILE")
                TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                NEW_NAME="${TIMESTAMP}_${FILE_NAME}"
                DEST_PATH="$OUTBOX_DIR/$NEW_NAME"

                mv "$FILE" "$DEST_PATH"
                echo "$(date '+%Y-%m-%d %H:%M:%S') MOVED: $FILE -> $DEST_PATH" >> "$LOG_FILE"
            fi
        done
    done
    sleep 2
done







#!/bin/bash

# === CONFIGURATION ===
WATCH_DIRS=(
    "/home/ankita/Seeker1"
    "/home/ankita/Seeker2"
)
OUTBOX_DIR="/home/ankita/Vault"
LOG_DIR="/tmp/seeker_logs"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="$LOG_DIR/seeker_$TIMESTAMP.log"

# === SETUP ===
mkdir -p "$OUTBOX_DIR"
mkdir -p "$LOG_DIR"
touch "$LOG_FILE"

# Enable case-insensitive pattern matching
shopt -s nocasematch

echo "[$(date '+%Y-%m-%d %H:%M:%S')] INFO: Seeker watcher started. Watching ${#WATCH_DIRS[@]} folders." >> "$LOG_FILE"

# === MAIN LOOP ===
while true; do
    for DIR in "${WATCH_DIRS[@]}"; do
        if [ ! -d "$DIR" ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARN: Directory not found: $DIR" >> "$LOG_FILE"
            continue
        fi

        for FILE in "$DIR"/*; do
            # Skip if not a regular file or if it is a symlink
            [[ -f "$FILE" && ! -L "$FILE" ]] || continue

            # Check for .csv files (case-insensitive)
            if [[ "$FILE" == *.csv ]]; then
                FILE_NAME=$(basename "$FILE")

                # Validate filename: only letters, numbers, underscore, hyphen, dot allowed
                if [[ ! "$FILE_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
                    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARN: Unsafe filename skipped: $FILE_NAME" >> "$LOG_FILE"
                    continue
                fi

                NOW=$(date +%Y%m%d_%H%M%S)
                NEW_NAME="${NOW}_${FILE_NAME}"
                DEST_PATH="$OUTBOX_DIR/$NEW_NAME"

                if mv "$FILE" "$DEST_PATH"; then
                    echo "[$(date '+%Y-%m-%d %H:%M:%S')] MOVED: $FILE -> $DEST_PATH" >> "$LOG_FILE"
                else
                    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Failed to move $FILE" >> "$LOG_FILE"
                fi
            fi
        done
    done
    sleep 2
done
