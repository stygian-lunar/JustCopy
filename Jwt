
const jwt = require('jsonwebtoken');

// Your JWT payload
const payload = {
  // Add your payload data here
  username: 'example_user',
  role: 'admin',
};

// Your JWT secret key
const secretKey = 'your_secret_key';

// JWT options (optional)
const options = {
  expiresIn: '1h', // token expiration time
  algorithm: 'HS256', // algorithm used to sign the token
};

// Generate the JWT token
const token = jwt.sign(payload, secretKey, options);

// Set the token in the request headers
pm.environment.set('jwt_token', token);







import java.util.*;

public class Main {
    public static void main(String[] args) {
        String dataString = "{Ford:(\"1\",\"2\",\"3\"), Gc:(\"7\",\"8\")}";

        // Remove the curly braces
        dataString = dataString.substring(1, dataString.length() - 1);

        // Split the string by comma and colon to separate keys and values
        String[] pairs = dataString.split(", ");

        // Create a HashMap to store the data
        Map<String, List<String>> dataMap = new HashMap<>();

        for (String pair : pairs) {
            String[] keyValue = pair.split(":");
            String key = keyValue[0].trim();
            String[] valuesArray = keyValue[1].substring(1, keyValue[1].length() - 1).split(",");
            List<String> valuesList = new ArrayList<>();

            for (String value : valuesArray) {
                valuesList.add(value.trim().replaceAll("\"", ""));
            }

            dataMap.put(key, valuesList);
        }

        System.out.println(dataMap);
    }
}




import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import java.util.*;

@SpringBootApplication
public class Main {

    @Value("${itm.response.versions}")
    private String responseVersionsProperty;

    private static Map<String, Set<String>> allowedVersionsMap = new HashMap<>();

    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }

    // Method to parse property from application.properties into the map
    private static void parsePropertyIntoMap(String propertyValue) {
        // Remove curly braces
        String content = propertyValue.substring(1, propertyValue.length() - 1);

        // Split by comma and colon
        String[] parts = content.split(",\\s*");

        for (String part : parts) {
            String[] keyValue = part.split(":");
            String key = keyValue[0].trim().replaceAll("\"", "");
            String[] versions = keyValue[1].split(",");
            Set<String> versionSet = new HashSet<>(Arrays.asList(versions));
            allowedVersionsMap.put(key, versionSet);
        }
    }

    // Method to generate response and validate the response version
    private void generateResponse(String userId, String productCode, String responseVersion) {
        // Check if product code exists in the map
        if (allowedVersionsMap.containsKey(productCode)) {
            // Get allowed versions for the product code
            Set<String> allowedVersions = allowedVersionsMap.get(productCode);
            // Check if response version is allowed
            if (allowedVersions.contains(responseVersion)) {
                // Response version is valid, proceed with storing the response in the database
                System.out.println("Response version is valid. Storing response in the database...");
                // Your logic to store response in the database goes here
            } else {
                // Invalid response version, throw exception
                throw new IllegalArgumentException("Invalid response version for product code: " + productCode);
            }
        } else {
            // Product code not found in the map, throw exception
            throw new IllegalArgumentException("Product code not found: " + productCode);
        }
    }
}






import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.*;

@SpringBootApplication
public class Main {

    @Value("${itm.response.versions}") // Injects value from application.properties into responseVersionsProperty
    private String responseVersionsProperty;

    private static Map<String, Set<String>> allowedVersionsMap;

    public static void main(String[] args) {
        SpringApplication.run(Main.class, args); // Runs the Spring Boot application
        allowedVersionsMap = parsePropertyIntoMap(responseVersionsProperty); // Parses property into map
        System.out.println("Allowed Versions Map: " + allowedVersionsMap); // Prints the map
    }

    // Method to parse property from application.properties into the map
    private static Map<String, Set<String>> parsePropertyIntoMap(String propertyValue) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, String[]> map = objectMapper.readValue(propertyValue, Map.class);
            
            return map.entrySet().stream()
                    .collect(
                        HashMap::new,
                        (m, e) -> {
                            if (e.getValue().length > 0) {
                                m.put(e.getKey(), new HashSet<>(Arrays.asList(e.getValue())));
                            } else {
                                m.put(e.getKey(), Collections.emptySet());
                            }
                        },
                        HashMap::putAll
                    );
        } catch (IOException e) {
            e.printStackTrace();
            // Handle exception appropriately (e.g., logging)
            return Collections.emptyMap();
        }
    }
}














    public HashMap<String, String[]> itmResponseMap() {
        HashMap<String, String[]> map = new HashMap<>();
        try {
            // Remove surrounding braces and split by comma and colon
            String[] keyValuePairs = itmResponse.substring(1, itmResponse.length() - 1).split(",");
            for (String pair : keyValuePairs) {
                String[] entry = pair.split(":");
                // Trim quotes from keys and values
                String key = entry[0].trim().replaceAll("\"", "");
                String[] values = entry[1].trim().replaceAll("\"", "").replaceAll("\\{", "").replaceAll("\\}", "").split("\\|");
                map.put(key, values);
            }
        } catch (Exception e) {
            // Handle parsing exception
            e.printStackTrace();
        }
        return map;
    }















    public Map<String, String[]> itmResponseMap() {
        Map<String, String[]> resultMap = new HashMap<>();

        // Split the string by colon and remove curly braces
        Stream.of(itmResponse.split(":"))
                // Trim quotes from keys and values
                .map(entry -> entry.replaceAll("[\"{}]", "").trim())
                // Split the string by comma
                .map(entry -> entry.split(","))
                // Map key-value pairs
                .forEach(pair -> resultMap.put(pair[0], pair[1].split(",")));

        return resultMap;
    }

