
import com.prowidesoftware.iso20022.camt.Camt05100105;
import com.prowidesoftware.iso20022.camt.ObjectFactory;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JsonToMXConverter {
    public static void main(String[] args) throws Exception {
        // Step 1: Parse JSON into Java object using Jackson
        String jsonString = "{\"orderId\": \"123456789\", \"customerName\": \"John Doe\", \"amount\": 1000.00}";
        ObjectMapper objectMapper = new ObjectMapper();
        OrderConfirmation orderConfirmation = objectMapper.readValue(jsonString, OrderConfirmation.class);

        // Step 2: Create a new Camt05100105 object using ObjectFactory
        ObjectFactory factory = new ObjectFactory();
        Camt05100105 camt05100105 = factory.createCamt05100105();

        // Step 3: Populate the MX message object with JSON data
        Camt05100105.GrpHdr grpHdr = factory.createCamt05100105GrpHdr();
        grpHdr.setMsgId(orderConfirmation.getOrderId());
        camt05100105.setGrpHdr(grpHdr);

        // Add more elements as needed...

        // Step 4: Serialize the MX message object to XML
        String xml = marshal(camt05100105);
        System.out.println("XML MX message:\n" + xml);
    }

    // Helper method to serialize object to XML
    private static String marshal(Object obj) {
        // Implementation details omitted
        return ""; // Return XML string
    }
}

// Define OrderConfirmation class
class OrderConfirmation {
    private String orderId;
    private String customerName;
    private double amount;

    // Getters and setters omitted for brevity
}






Input (JSON):

json
Copy code
{
  "orderId": "123456789",
  "customerName": "John Doe",
  "amount": 1000.00
}


Output (XML MX message):

xml
Copy code
<?xml version="1.0" encoding="UTF-8"?>
<ns3:Document xmlns:ns2="urn:iso:std:iso:20022:tech:xsd:camt.051.001.05" xmlns:ns3="urn:iso:std:iso:20022:tech:xsd:camt.051.001.05">
    <ns3:GrpHdr>
        <ns3:MsgId>123456789</ns3:MsgId>
    </ns3:GrpHdr>
</ns3:Document>



Explanation:

The JSON input represents an order confirmation message with an orderId, customerName, and amount.
The code parses this JSON input into a Java object using Jackson's ObjectMapper.
It then creates an MX message object of type Camt05100105 using the Prowide ISO 20022 ObjectFactory.
The MsgId field of the group header (GrpHdr) of the MX message is set to the orderId from the JSON.
The MX message object is then serialized to XML format.



import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Component
public class PropChecker {

    // Injecting the property and parsing it into a Map<String, Set<String>> using SpEL
    @Value("#{${Prop}.entrySet().stream().collect(toMap(e -> e.key, e -> T(java.util.Set).of(e.value.split(','))))}")
    private Map<String, Set<String>> propMap;

    public boolean containsValue(String key, String number) {
        return propMap.containsKey(key) && propMap.get(key).contains(number);
    }
}
